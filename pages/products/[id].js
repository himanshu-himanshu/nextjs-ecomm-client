import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import {
  Cog8ToothIcon,
  MinusIcon,
  PlusIcon,
  ShoppingBagIcon,
} from "@heroicons/react/24/outline";
import { StarIcon } from "@heroicons/react/24/solid";
import Head from "next/head";
import { Toaster } from "react-hot-toast";
import { addItemToCart } from "../../redux/features/cart/cartSlice";
import { Navbar } from "../../components";
import { products } from "./../../utils/products";
import Spinner from "../../utils/Spinner";
import { useDispatch } from "react-redux";
import { showToast } from "../../utils/showToast";

const ProductPage = () => {
  const router = useRouter();
  const dispatch = useDispatch();
  const { id } = router.query;

  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [addingToCart, setAddingToCart] = useState(false);
  const [productQuantity, setProductQuantity] = useState(1);

  useEffect(() => {
    setLoading(true);
    if (id) {
      setTimeout(() => {
        // Use find to get the product with the matching 'id'
        const selectedProduct = products.find((p) => p.id === id);
        setProduct(selectedProduct);
        setLoading(false);
      }, 500);
    } else {
      console.error("Error loading product");
      setLoading(false);
    }
  }, [id]);

  const addToCart = () => {
    setAddingToCart(true);
    setTimeout(() => {
      // Select the product quantity from the useState hook
      const productWithQuantity = { ...product, quantity: productQuantity };
      dispatch(addItemToCart(productWithQuantity));
      showToast({ message: "Item added to cart", type: "Success" });
      setAddingToCart(false);
    }, 700);
  };

  const handleProductQuantity = ({ operation }) => {
    if (operation === "INCREASE") {
      if (productQuantity < 3) {
        setProductQuantity((prevQuantity) => prevQuantity + 1);
      } else {
        showToast({ message: "Maximum quantity exceeded", type: "Error" });
      }
    }
    if (operation === "DECREASE" && productQuantity > 1) {
      setProductQuantity((prevQuantity) => prevQuantity - 1);
    }
  };

  return (
    <>
      <Toaster
        position="top-right"
        toastOptions={{
          duration: 900,
        }}
      />
      <Head>
        <title>Grab.It</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      {!loading && product && (
        <>
          <div className="h-full w-full py-16 px-6 mt-4">
            <div className="max-w-5xl lg:max-w-6xl mx-auto h-full grid grid-col-1 md:grid-cols-2 md:gap-8 lg:gap-12">
              <div className="flex justify-center">
                <img
                  src={product.image}
                  alt="Product Image"
                  className="w-full h-full md:max-h-[400px] lg:max-h-[500px] md:max-w-[400px] lg:max-w-[500px]"
                />
              </div>
              <div className="p-4">
                <span className="font-Gruppo uppercase text-pink-600">
                  {product.brand}
                </span>
                <div>
                  <h1 className="font-Borui text-2xl md:text-3xl lg:text-4xl text-primary mt-6 mb-4">
                    {product.title}
                  </h1>
                </div>
                <span className="flex flex-row items-center space-x-2 py-2">
                  <span className="text-gray-600 font-Borui text-xl">
                    {product.rating}
                  </span>
                  <StarIcon className="h-5 w-5 text-yellow-500" />
                </span>
                <div>
                  <p className="font-Gruppo text-lg md:text-xl text-primary mb-8">
                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Est
                    quasi optio labore qui. Architecto soluta dolores necessitas
                    esse rem nobis, alias officiis obcaecati, fuga numquam
                    aliquid ducimus sint minima aperiam.
                  </p>
                </div>
                <div>
                  <h1 className="font-Gruppo text-2xl md:text-3xl lg:text-4xl text-primary my-6">
                    ${product.price}
                  </h1>
                </div>

                <div className="grid grid-cols-3 gap-4 py-2">
                  <div className="flex flex-row items-center justify-center p-4 border border-gray-300 space-x-4">
                    <MinusIcon
                      className={`h-4 w-4 ${
                        productQuantity === 1
                          ? "text-gray-300 hover:cursor-not-allowed"
                          : "text-gray-500 hover:cursor-pointer"
                      }`}
                      onClick={() =>
                        handleProductQuantity({ operation: "DECREASE" })
                      }
                    />
                    <span className="text-md font-Gruppo font-extrabold p-1 min-w-[30px] mx-auto text-center">
                      {productQuantity}
                    </span>
                    <PlusIcon
                      className={`h-4 w-4 ${
                        productQuantity === 3
                          ? "text-gray-300 hover:cursor-not-allowed"
                          : "text-gray-500 hover:cursor-pointer"
                      }`}
                      onClick={() => {
                        if (productQuantity < 3) {
                          handleProductQuantity({ operation: "INCREASE" });
                        }
                      }}
                    />
                  </div>
                  <div className="flex flex-row items-center justify-between col-span-2">
                    <button
                      className="group flex justify-center items-center py-4 sm:py-5 w-full border border-primary bg-white hover:bg-primary duration-200 font-Gruppo font-extrabold text-lg md:text-xl shadow-sm hover:shadow-lg"
                      onClick={(e) => {
                        addToCart();
                      }}
                    >
                      {!addingToCart ? (
                        <ShoppingBagIcon className="h-8 w-8 text-primary group-hover:text-secondary" />
                      ) : (
                        <Cog8ToothIcon className="h-8 w-8 text-secondary animate-spin" />
                      )}
                    </button>
                  </div>
                </div>
                <div
                  className="py-2 font-Gruppo font-extrabold hover:cursor-pointer text-gray-700 hover:text-pink-500 duration-200"
                  onClick={() => {
                    product.gender === "men"
                      ? router.push(`/products/men`)
                      : router.push(`/products/women`);
                  }}
                >
                  <span>&larr; Back to shopping</span>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
      {loading && <Spinner />}
    </>
  );
};

export default ProductPage;
